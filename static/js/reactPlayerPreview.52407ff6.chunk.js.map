{"version":3,"file":"static/js/reactPlayerPreview.52407ff6.chunk.js","mappings":"qNACMA,EAAY,OACZC,EAAQ,CAAC,EA8FXC,EA7FY,SAAH,GAQP,IAPJC,EAAG,EAAHA,IACAC,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAc,EAAdA,eACAC,EAAQ,EAARA,SACAC,EAAe,EAAfA,gBACAC,EAAgB,EAAhBA,iBAEA,GAA0BC,EAAAA,EAAAA,UAAS,MAAK,eAAjCC,EAAK,KAAEC,EAAQ,MACtBC,EAAAA,EAAAA,YAAU,WACHV,GAAQC,GAAUC,GACvBS,EAAW,CAAEX,IAAAA,EAAKC,MAAAA,EAAOC,UAAAA,GAC3B,GAAG,CAACF,EAAKC,EAAOC,IAChB,IAAMS,EAAU,yCAAG,oGAGR,GAFJC,EAAI,EAATZ,IACOa,EAAM,EAAbZ,MACWa,EAAU,EAArBZ,WAEIa,EAAAA,eAAqBF,GAAS,CAAF,mDAGV,kBAAXA,EAAmB,gBACX,OAAjBJ,EAASI,GAAQ,8BAGff,EAAMc,GAAO,CAAF,eACS,OAAtBH,EAASX,EAAMc,IAAO,0BAGT,OAAfH,EAAS,MAAM,UACQO,MAAMF,EAAWG,QAAQ,QAASL,IAAM,QAAjD,OAARM,EAAW,EAAH,eACKA,EAASC,OAAM,SAA5BC,EAAO,EAAH,MACDC,gBACDC,EAAeF,EAAKC,cAAcJ,QAAQ,aAAc,cAAcA,QAAQ,aAAc,UAClGR,EAASa,GACTxB,EAAMc,GAAQU,GACf,4CACF,gBAxBe,sCAiCVC,EAAYR,EAAAA,eAAqBd,GACjCuB,EAAa,CACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAEZC,EAAS,CACbC,SAAS,QACPC,MAAO,OACPC,OAAQ,OACRC,gBAAiBxB,IAAUe,EAAY,OAAH,OAAUf,EAAK,UAAM,EACzDyB,eAAgB,QAChBC,mBAAoB,SACpBC,OAAQ,WACLX,GAELY,QAAQ,QACNC,WAAY,2DACZC,aAAczC,EACdiC,MAAOjC,EACPkC,OAAQlC,EACR0C,SAAUhB,EAAY,gBAAa,GAChCC,GAELpB,SAAU,CACRoC,YAAa,QACbC,YAAa,mBACbC,YAAa,4CACbC,WAAY,QAGVC,EAAkC7B,EAAAA,cAAoB,MAAO,CAAE8B,MAAOjB,EAAOQ,OAAQU,UAAW,wBAA0C/B,EAAAA,cAAoB,MAAO,CAAE8B,MAAOjB,EAAOxB,SAAU0C,UAAW,6BAChN,OAAuB/B,EAAAA,cACrB,OAAK,QAEH8B,MAAOjB,EAAOC,QACdiB,UAAW,wBACXC,SAAU1C,EACV2C,QAzCgB,SAACC,GACD,MAAlB9C,GAAkCA,EAAe8C,EACnD,EAwCIC,WA/CmB,SAACD,GACR,UAAVA,EAAEE,KAA6B,MAAVF,EAAEE,KACP,MAAlBhD,GAAkCA,EAAe8C,EAErD,GA4CO3C,EAAmB,CAAE,aAAcA,GAAqB,CAAC,GAE9DiB,EAAYtB,EAAQ,KACpBG,GAAYwC,EAEhB,C","sources":["../node_modules/react-player/dist/Preview.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst ICON_SIZE = \"64px\";\nconst cache = {};\nconst Preview = ({\n  src,\n  light,\n  oEmbedUrl,\n  onClickPreview,\n  playIcon,\n  previewTabIndex,\n  previewAriaLabel\n}) => {\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    if (!src || !light || !oEmbedUrl) return;\n    fetchImage({ src, light, oEmbedUrl });\n  }, [src, light, oEmbedUrl]);\n  const fetchImage = async ({\n    src: src2,\n    light: light2,\n    oEmbedUrl: oEmbedUrl2\n  }) => {\n    if (React.isValidElement(light2)) {\n      return;\n    }\n    if (typeof light2 === \"string\") {\n      setImage(light2);\n      return;\n    }\n    if (cache[src2]) {\n      setImage(cache[src2]);\n      return;\n    }\n    setImage(null);\n    const response = await fetch(oEmbedUrl2.replace(\"{url}\", src2));\n    const data = await response.json();\n    if (data.thumbnail_url) {\n      const fetchedImage = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n      setImage(fetchedImage);\n      cache[src2] = fetchedImage;\n    }\n  };\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      onClickPreview == null ? void 0 : onClickPreview(e);\n    }\n  };\n  const handleClick = (e) => {\n    onClickPreview == null ? void 0 : onClickPreview(e);\n  };\n  const isElement = React.isValidElement(light);\n  const flexCenter = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  };\n  const styles = {\n    preview: {\n      width: \"100%\",\n      height: \"100%\",\n      backgroundImage: image && !isElement ? `url(${image})` : void 0,\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n      cursor: \"pointer\",\n      ...flexCenter\n    },\n    shadow: {\n      background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n      borderRadius: ICON_SIZE,\n      width: ICON_SIZE,\n      height: ICON_SIZE,\n      position: isElement ? \"absolute\" : void 0,\n      ...flexCenter\n    },\n    playIcon: {\n      borderStyle: \"solid\",\n      borderWidth: \"16px 0 16px 26px\",\n      borderColor: \"transparent transparent transparent white\",\n      marginLeft: \"7px\"\n    }\n  };\n  const defaultPlayIcon = /* @__PURE__ */ React.createElement(\"div\", { style: styles.shadow, className: \"react-player__shadow\" }, /* @__PURE__ */ React.createElement(\"div\", { style: styles.playIcon, className: \"react-player__play-icon\" }));\n  return /* @__PURE__ */ React.createElement(\n    \"div\",\n    {\n      style: styles.preview,\n      className: \"react-player__preview\",\n      tabIndex: previewTabIndex,\n      onClick: handleClick,\n      onKeyPress: handleKeyPress,\n      ...previewAriaLabel ? { \"aria-label\": previewAriaLabel } : {}\n    },\n    isElement ? light : null,\n    playIcon || defaultPlayIcon\n  );\n};\nvar Preview_default = Preview;\nexport {\n  Preview_default as default\n};\n"],"names":["ICON_SIZE","cache","Preview_default","src","light","oEmbedUrl","onClickPreview","playIcon","previewTabIndex","previewAriaLabel","useState","image","setImage","useEffect","fetchImage","src2","light2","oEmbedUrl2","React","fetch","replace","response","json","data","thumbnail_url","fetchedImage","isElement","flexCenter","display","alignItems","justifyContent","styles","preview","width","height","backgroundImage","backgroundSize","backgroundPosition","cursor","shadow","background","borderRadius","position","borderStyle","borderWidth","borderColor","marginLeft","defaultPlayIcon","style","className","tabIndex","onClick","e","onKeyPress","key"],"sourceRoot":""}